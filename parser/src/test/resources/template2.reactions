import "http://vitruv.tools/reactionsparser/model" as ascet
import "http://vitruv.tools/reactionsparser/model2" as amalthea

reactions: amalthea2ascet
in reaction to changes in amalthea
execute actions in ascet

reaction TaskDeleted {
	after element amalthea::Task deleted
	call deleteTask(affectedEObject)
}

routine deleteTask (amalthea::Task task){
	match{
		val ascettask = retrieve ascet::Task corresponding to task
	}
	update{
        if (ascettask !== null) {
			removeObject(ascettask)
			removeCorrespondenceBetween(task, ascettask)
		}     
	}
	
}

reaction TaskCreated {
	after element amalthea::Task inserted in amalthea::ComponentContainer[tasks]
		call createAscetTask(newValue,affectedEObject)
}

routine createAscetTask(amalthea::Task task, amalthea::ComponentContainer container){
	update {
		val String userMsg = "A Task has been created. Please decide whether and which corresponding ASCET Task should be created."

        val interruptTaskOption = "Create InterruptTask"
        val periodicTaskOption = "Create PeriodicTask"
        val softwareTaskOption = "Create SoftwareTask"
        val timeTableTaskOption = "Create TimeTableTask"   
        val doNothingOption = "Decide Later"

        val String[] options = #[
            interruptTaskOption,
            periodicTaskOption,
            softwareTaskOption,
            timeTableTaskOption,
            doNothingOption
        ]

        val selected = userInteractor
        .singleSelectionDialogBuilder
        .message(userMsg)
        .choices(options)
        .startInteraction()

    
        switch (selected) {
            case interruptTaskOption: {
                createInterruptTask(task,container)               
            }
            case periodicTaskOption: {
                createPeriodicTask(task,container)
            }
            case softwareTaskOption: {
                createSoftwareTask(task,container)
            }
            case timeTableTaskOption: {
                createTimeTableTask(task,container)
            }
            case doNothingOption: {
                // no action
            }
        }
		
	}
}

routine createInterruptTask(amalthea::Task task, amalthea::ComponentContainer container){
	
	match {
		val AscetModule = retrieve ascet::AscetModule corresponding to container
		require absence of ascet::InterruptTask corresponding to task
		 
	}
	create {
		val interruptTask = new ascet::InterruptTask
	}
	update {
		AscetModule.tasks += interruptTask
		addCorrespondenceBetween(interruptTask, container)
		
	}
}

routine createPeriodicTask(amalthea::Task task, amalthea::ComponentContainer container){
	
	match {
		val AscetModule = retrieve ascet::AscetModule corresponding to container
		require absence of ascet::PeriodicTask corresponding to task
		 
	}
	create {
		val periodicTask = new ascet::PeriodicTask
	}
	update {
		AscetModule.tasks += periodicTask
		addCorrespondenceBetween(periodicTask, container)
		
	}
}

routine createSoftwareTask(amalthea::Task task, amalthea::ComponentContainer container){
	
	match {
		val AscetModule = retrieve ascet::AscetModule corresponding to container
		require absence of ascet::SoftwareTask corresponding to task
		 
	}
	create {
		val softwareTask = new ascet::SoftwareTask
	}
	update {
		AscetModule.tasks += softwareTask
		addCorrespondenceBetween(softwareTask, container)
		
	}
}

routine createTimeTableTask(amalthea::Task task, amalthea::ComponentContainer container){
	
	match {
		val AscetModule = retrieve ascet::AscetModule corresponding to container
		require absence of ascet::TimeTableTask corresponding to task
		 
	}
	create {
		val timeTableTask = new ascet::TimeTableTask
	}
	update {
		AscetModule.tasks += timeTableTask
		addCorrespondenceBetween(timeTableTask, container)
		
	}
}


